services:
  php:
    restart: unless-stopped
    build:
        context: .
        dockerfile: Dockerfile
    environment:
      APP_ENV: ${APP_ENV:-dev}
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
      DATABASE_URL: mysql://${MYSQL_USER:-app}:${MYSQL_PASSWORD:-!ChangeMe!}@database:3306/${MYSQL_DATABASE:-app}?serverVersion=${MYSQL_VERSION:-8.0}&charset=${MYSQL_CHARSET:-utf8mb4}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: 80
        protocol: tcp
      # HTTPS
      - target: 443
        published: 443
        protocol: tcp
      # HTTP/3
      - target: 443
        published: 443
        protocol: udp


###> doctrine/doctrine-bundle ###
  # ---
  # The database service below is optional. If you use your own database (container or external),
  # you can comment out or remove this block. Make sure to update the DATABASE_URL in the php service accordingly.
  # ---
  database:
    image: mysql:${MYSQL_VERSION:-8.0}
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-app}
      MYSQL_USER: ${MYSQL_USER:-app}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-!ChangeMe!}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-!ChangeRootPassword!}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/mysql:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/mysql:rw
###< doctrine/doctrine-bundle ###

  cron:
    build:
      context: ./docker/cron
    volumes:
      - .:/var/www/html
    depends_on:
      - php

volumes:
  caddy_data:
  caddy_config:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
